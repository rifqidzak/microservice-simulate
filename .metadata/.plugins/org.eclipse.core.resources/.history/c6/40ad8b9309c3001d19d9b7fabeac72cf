package com.example.microservice.core.util;

import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtil {
	private final KeyPair key;
	
	public JwtUtil(@Value("${public.key}") String publicKey) {
        // Decode private and public key from Base64 encoded string
        byte[] decodedPublicKeyBytes = Base64.getDecoder().decode(publicKey.getBytes(StandardCharsets.UTF_8));
        try {
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PrivateKey decodedPrivateKey = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(decodedPrivateKeyBytes));
            PublicKey decodedPublicKey = keyFactory.generatePublic(new X509EncodedKeySpec(decodedPublicKeyBytes));
            this.key = new KeyPair(decodedPublicKey, decodedPrivateKey);
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new RuntimeException("Error decoding keys", e);
        }
    }
	public Claims parseJwt(final String token) {
		final var secretKey = Keys.hmacShaKeyFor(publicKey.getBytes());
		return Jwts.parserBuilder().setSigningKey(secretKey).build().parseClaimsJws(token).getBody();
	}

}
